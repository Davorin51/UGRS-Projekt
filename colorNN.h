#ifndef UUID140285649738048
#define UUID140285649738048

#include <EloquentTinyML.h>
#include <eloquent_tinyml/tensorflow.h>

#ifdef __has_attribute
#define HAVE_ATTRIBUTE(x) __has_attribute(x)
#else
#define HAVE_ATTRIBUTE(x) 0
#endif
#if HAVE_ATTRIBUTE(aligned) || (defined(__GNUC__) && !defined(__clang__))
#define DATA_ALIGN_ATTRIBUTE __attribute__((aligned(4)))
#else
#define DATA_ALIGN_ATTRIBUTE
#endif

#ifndef ARENA_SIZE
#define ARENA_SIZE 4096
#endif

/** model size = 2976 bytes **/
const unsigned char modelData[] DATA_ALIGN_ATTRIBUTE = { 0x1c, 0x00, 0x00, 0x00, 0x54, 0x46, 0x4c, 0x33, 0x14, 0x00, 0x20, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x8c, 0x05, 0x00, 0x00, 0x9c, 0x05, 0x00, 0x00, 0x3c, 0x0b, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x26, 0xfa, 0xff, 0xff, 0x0c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x32, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0xfb, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xdc, 0xff, 0xff, 0xff, 0x0d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xac, 0x04, 0x00, 0x00, 0xa4, 0x04, 0x00, 0x00, 0x54, 0x04, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0xc8, 0x03, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe2, 0xfb, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x32, 0x2e, 0x31, 0x31, 0x2e, 0x30, 0x00, 0x00, 0x42, 0xfc, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xf6, 0xff, 0xff, 0x88, 0xf6, 0xff, 0xff, 0x8c, 0xf6, 0xff, 0xff, 0x90, 0xf6, 0xff, 0xff, 0x6e, 0xfc, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xb0, 0x7e, 0x9f, 0xbd, 0x38, 0xd8, 0x28, 0xbf, 0x83, 0x69, 0x56, 0xbf, 0x56, 0xe4, 0x6b, 0x3e, 0xe3, 0x77, 0x24, 0x3e, 0x3b, 0x03, 0x78, 0xbe, 0x7c, 0x9e, 0x63, 0xbe, 0xe8, 0xd0, 0x29, 0x3d, 0x10, 0xb5, 0x08, 0xbc, 0x7f, 0x24, 0x87, 0xbe, 0xda, 0x73, 0x46, 0xbe, 0x0c, 0xc6, 0x9c, 0xbe, 0x52, 0x27, 0xf2, 0xbe, 0xe0, 0x72, 0x35, 0xbf, 0x45, 0xb9, 0xce, 0xbe, 0xac, 0x4b, 0x85, 0xbe, 0xf4, 0x56, 0x35, 0x3d, 0x36, 0xdc, 0x2a, 0xbe, 0x0f, 0x3a, 0x8c, 0xbe, 0x60, 0x95, 0x5c, 0xbe, 0xc2, 0x34, 0xb8, 0xbe, 0x16, 0x09, 0xd9, 0xbe, 0xdc, 0x2f, 0x94, 0xbe, 0x13, 0xa9, 0xc1, 0x3e, 0x63, 0xbb, 0x91, 0x3d, 0x55, 0xea, 0x9c, 0xbe, 0xc8, 0x8c, 0x09, 0x3d, 0x14, 0xc6, 0x0a, 0xbe, 0x1d, 0xb8, 0x8e, 0x3e, 0x1c, 0xac, 0xed, 0xbd, 0x35, 0xbe, 0xe8, 0xbe, 0x83, 0x21, 0x9a, 0x3e, 0xfb, 0x52, 0x01, 0xbe, 0x61, 0x3a, 0x0d, 0xbf, 0x88, 0xf2, 0xe1, 0xbe, 0x07, 0x12, 0x8f, 0x3e, 0x20, 0x3c, 0xa3, 0xbe, 0xc0, 0x73, 0xd3, 0xbb, 0x1a, 0x05, 0xdf, 0xbe, 0x0e, 0x90, 0x5f, 0xbe, 0xf2, 0x4d, 0x03, 0xbf, 0x7e, 0xca, 0x84, 0x3c, 0x3f, 0xd6, 0xbf, 0xbe, 0x94, 0xab, 0x8e, 0xbe, 0xb3, 0x76, 0xea, 0xbe, 0xca, 0x71, 0x28, 0xbf, 0x63, 0x4e, 0x0e, 0x3e, 0x12, 0x1c, 0x7c, 0x3e, 0x5d, 0x43, 0xad, 0xbe, 0x60, 0x1b, 0x41, 0xbf, 0xa9, 

/**
 * Wrapper around the EloquentTinyML library
 */
template<uint32_t arenaSize>
class TensorFlowPorter {
    public:
        Eloquent::TinyML::TensorFlow::AllOpsTensorFlow<3, 9, arenaSize> tf;

        /**
         * Init model
         */
        bool begin() {
            return tf.begin(modelData);
        }

        /**
         * Proxy
         */
        uint8_t predict(uint8_t *input, uint8_t *output = NULL) {
            return tf.predict(input, output);
        }

        /**
         * Proxy
         */
        int8_t predict(int8_t *input, int8_t *output = NULL) {
            return tf.predict(input, output);
        }

        /**
         * Proxy
         */
        float predict(float *input, float *output = NULL) {
            return tf.predict(input, output);
        }

        /**
         * Proxy
         */
        template<typename T>
        uint8_t predictClass(T *input) {
            return tf.predictClass(input);
        }

        /**
         * Proxy
         */
        float getScoreAt(uint8_t index) {
            return tf.getScoreAt(index);
        }

        /**
         * Proxy
         */
        String getErrorMessage() {
            return tf.getErrorMessage();
        }
};



TensorFlowPorter<ARENA_SIZE> colorNN;


#endif
